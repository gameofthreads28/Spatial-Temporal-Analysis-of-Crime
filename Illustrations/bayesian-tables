/************************************************/
Identifier.l
*************************************************/
%{
#include<stdio.h>
int n=10;
int lin=1;
%}
DIGIT [0-9]
ID [a-z][a-z0-9]*
line \n
%%
{line} {lin++;}
case|default|if|for|printf|scanf|main|int|float|char {ECHO; printf("\t keyword \t line %d\n", lin);	}
ID	{ECHO;	printf("\t constant \t line %d\n",lin);	}
{DIGIT}+ {ECHO; printf("\t integer \t line %d\n",lin);}
{DIGIT}+"."{DIGIT}* {ECHO; printf("\t float \t line %d\n",lin);}
"+"|"-"|"*"|"/"|"=" {ECHO; printf("\t float \t line %d\n",lin);}
"("|")"|"{"|"}"|";"|" "|"," ;
" ";                    /* Remove white space. */
"\t";
%%
/************************************************/
 Date.l
*************************************************/
%{
#include<stdio.h>
%}
la ([0-2][0-9]|[3][0-1])\/((0(1|3|5|7|8))|(10|12))\/([1-2][0-9][0-9][0-9])
lb ([0-2][0-9]|30)\/((0(4|6|9))|11)\/([1-2][0-9][0-9][0-9])
lc ([0-1][0-9]|2[0-8])\/02\/([1-2][0-9][0-9][0-9])
ld 29\/02\/([1-2][0-9][0-9][0-9])
ver {la}|{lb}|{lc}|{ld}
%%
{ver} { //printf("WORKS");
	printf("It is a valid date\n");
	printf("%c%c/",yytext[3],yytext[4]);
	printf("%c%c/",yytext[0],yytext[1]);
	printf("%c%c%c%c",yytext[6],yytext[7],yytext[8],yytext[9]);
    }
.\n{
	printf("INCORRECT DATE");
}
%%
main()
{
yylex();
}
int yywrap(void)
{
return 1;
}
/*************************************************
Count0s1s.l
*************************************************/
%{
#include <stdio.h>
#include "y.tab.h"
%}
%%
"0"     { return ZERO; }
"1"     { return ONE; }
.       { printf ("yylex:error:%s\n", yytext);}
%%
/*************************************************
Count0s1s.y
*************************************************/
%{
#include<stdio.h>
int count0 = 0,count1 = 0;
%}
%token ZERO ONE
%%
S   : A
    {
      printf("Count 0 = %d, Count 1 = %d\n", count0, count1);
    }
A   : ZERO S {count0++; }  
    | ZERO {count0++; }
    | ONE {count1++; }
    | ONE S {count1++; }
    ;
%%
void yyerror(char *msg)
{
     printf("error in input %s\n", msg);
     exit(1);
}
int main()
{
     int i;
     yyparse();
}
/*************************************************
Postfix.l evaluator
*************************************************/
/* Lex Source for Post Fix Evaluation : Example program
  File: a.l
  Desc: Lexical Analyser
*/

%{
#include <stdio.h>
#include "y.tab.h"
/*extern int yylval; */
%}

delim           [ \t\n]
ws              {delim}+
letter		[a-zA-Z]
l_		[letter_]
digit		[0-9]
id		{l_}({l_}|{digit})*
int_num		{digit}+

%%
{ws}	{}
"+"	{return PLUS;}
"-"	{return MINUS;}
"*"	{return MUL;}
"/"	{return DIV;}
"(" {return LRP;}
")" {return RRP;}
";" {return SEMICOLON;}
{int_num} {yylval.iVal = strtol(yytext, NULL, 10); return NUMBER;}
{id} 	{ return ID;}
.	{ printf ("yylex:error:%s:\n", yytext);}
%%

/*************************************************
Postfix.y evaluator
*************************************************/
/* YACC Source for Post Fix Evaluation : Example program
  File: a.y
  Desc: Parser Generator
*/
%{
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#define MAX_LEN  10
%}
%union {
  int iVal;
  char *sVal;
}

%token <iVal> NUMBER
%token EOLN PLUS MINUS MUL DIV LRP RRP 
%token SEMICOLON ID

%type <iVal> expr
/*
  E -> E  E + |  E E *  | NUM | ID 
  printf ("T1:got %d * %d\n", $1, $3);

%left PLUS 
%left MUL
*/

%%

lines  : lines expr SEMICOLON   
         { 
           printf( "The postfix expr result = %d\n", $2);
           printf( "2:Pl enter yet another postfix expr ending with ; or <ctrl-d> to quit : ");
         }
       | lines SEMICOLON  
       |   /*epsilon*/    { printf("1:Pl enter an postfix expr ending with ; or <ctrl-d> to quit : ");}    
       ;

expr	 : expr expr PLUS          { $$ = $1 + $2; }
       | expr expr MUL           { $$ = $1 * $2; } 
       | NUMBER                  { $$ = $1;}
	     ;

%%
void yyerror(char *msg)
{
  printf("error in input %s\n", msg);
  exit(1);
}

int main()
{      yyparse();           }
/*************************************************
Prefix.l
*************************************************/
/* Lex Source for Post Fix Evaluation : Example program
  File: a.l
  Desc: Lexical Analyser
*/

%{
#include <stdio.h>
#include "y.tab.h"
/*extern int yylval; */
%}

delim           [ \t\n]
ws              {delim}+
letter		[a-zA-Z]
l_		[letter_]
digit		[0-9]
id		{l_}({l_}|{digit})*
int_num		{digit}+

%%
{ws}	{}
"+"	{return PLUS;}
"-"	{return MINUS;}
"*"	{return MUL;}
"/"	{return DIV;}
"(" {return LRP;}
")" {return RRP;}
";" {return SEMICOLON;}
{int_num} {yylval.iVal = strtol(yytext, NULL, 10); return NUMBER;}
{id} 	{ return ID;}
.	{ printf ("yylex:error:%s:\n", yytext);}
%%

/*************************************************
Prefix.y
*************************************************/
%{
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#define MAX_LEN  10
%}
%union {
  int iVal;
  char *sVal;
}

%token EOLN PLUS MINUS MUL DIV LRP RRP
%token <iVal> NUMBER 
%token SEMICOLON ID

%type <iVal> expr
/*
  E -> E  E + |  E E *  | NUM | ID 
  printf ("T1:got %d * %d\n", $1, $3);

%left PLUS 
%left MUL
*/

%%

lines  : lines expr SEMICOLON   
         { 
           printf( "The prefix expr result = %d\n", $2);
           printf( "2:Pl enter yet another prefix expr ending with ; or <ctrl-d> to quit : ");
         }
       | lines SEMICOLON  
       |   /*epsilon*/    { printf("1:Pl enter an prefix expr ending with ; or <ctrl-d> to quit : ");}    
       ;

expr	 : PLUS expr expr          { $$ = $2 + $3; }
	   | MINUS expr expr          { $$ = $2 - $3; }
       | MUL expr expr           { $$ = $2 * $3; } 
       | DIV expr expr           { $$ = $2 / $3; } 
       | NUMBER                  { $$ = $1;}
	     ;

%%
void yyerror(char *msg)
{
  printf("error in input %s\n", msg);
  exit(1);
}

int main()
{      yyparse();           }

/*************************************************
textTOHtml.l
*************************************************/
%{
#include <stdio.h>
#include "y.tab.h"
%}
id 20(0|1)[0-9]A[1-9A]((P|T)S)[0-9]{3}U
name [a-zA-Z]+
date (0[1-9]|1[012])\/(0[1-9]|[12][0-9]|3[01])\/(19|20)[0-9][0-9]
cgpa ([0-9]\.[0-9]{2})|(10\.00)
%%
{id} { return ID; }
{name} { return NAME; }
{date} { return DATE; }
{cgpa} { return CGPA; }
\n { return NL; }
%%
/*************************************************
textTOHtml.y
*************************************************/
%{
#include <stdio.h>
#include <stdlib.h>
extern char *yytext;
%}

%union
{
  char *sVal;
  int iVal;
}
 %token < sVal > ID NAME DATE CGPA NL %% xxx:data NL xxx | data NL;
data:id name date cgpa;
id:ID
{
  printf ("<p>\n %s", yytext);
};
name:NAME
{
  printf (" %s", yytext);
};
date:DATE
{
  printf (" %s", yytext);
};
cgpa:CGPA
{
  printf ("%s\n  </p>\n", yytext);
};
%%yyerror (char *msg)
{
  printf ("Error: %s\n", msg);
}
int
main ()
{
  printf ("<DOCTYPE html>\n");
  printf ("<html>\n");
  printf ("<body>\n");
  yyparse ();
  printf ("</html>\n");
  return 0;
}
/*************************************************
HashTable.java
*************************************************/
import java.util.*;
import java.io.*;

class HashTable
{
	public static void main(String[] args)
  	{
  		Scanner inp = new Scanner(System.in);
  		String input = inp.nextLine();
  		int hashvalue = 0;
      		int count = 0;
  		Hashtable Hashes = new Hashtable();
  		Enumeration s2h;
      
      	while(!input.equals(" "))
  		{	int a =0,b=0;
          	for (int i=0; i<input.length(); i++)
 			{	int c = (int)input.charAt(i);
				if ((c >=65 && c <=90) ||(c >=97 && c <=122))
		        	{  a += c;  }
     			  	else if (c >=48 && c <=57)
       				{  b += c;  }
			
				hashvalue = ((a + b*2)*17+5) % 6;
				Hashes.put(input,hashvalue);
      			input = inp.nextLine();
			}
		}
		System.out.println();
		s2h = Hashes.keys();
		String str;
  		
		while(s2h.hasMoreElements()) 
    		{	str = (String) s2h.nextElement();
       			System.out.println(str + ": " + Hashes.get(str));
    		} 		
	}
}

/*************************************************
IntermediateCode.java
*************************************************/
import java.util.*;
import java.io.*;

public class IntermediateCode
{
	public static void printRow(String a, String o, String a1, String a2, String r)
	{
		System.out.println(a + "\t\t||" +o + "\t\t||" +a1 + "\t\t||" +a2 + "\t\t||" + r );
	}
	public static void main(String args[])
	{
		Scanner inp = new Scanner(System.in);
		
		String input = inp.nextLine();
		printRow("INPUT","OP","ARG1","ARG2","RESULT");
		
		String[] token = input.split("=");
		String[] exp_token = token[1].split("-");
		
		if (exp_token.length == 1)
		{	printRow(input,"=",token[1],"nill",token[0]);	}
		else 
		{
			int count =0;
			String pretemp = "";
			String temp = "";
			for (int i=0;i<exp_token.length-1;i++)
			{
				pretemp = "temp"+count;
				count++;
				temp = "temp"+count;
				if (i==0)
				{	printRow(input,"-",exp_token[i],exp_token[i+1],temp);		}
				else
				{
					printRow(" ","-",pretemp,exp_token[i+1],temp);	
				}
			}
			printRow("","=",temp,"nil",token[0]);
		}
	}
}
/*************************************************
CodeGeneration.java
*************************************************/
import java.util.*;
public class CodeGeneration
{
	public static void main(String[] args)
	{
		Scanner in = new Scanner(System.in);
		String input = "";

		System.out.println(".global main");
		System.out.println("msg:");
		System.out.println(".string \"Final result of LHS var = %d\\n\"");
		System.out.println(".comm   a,4");
		System.out.println(".comm   b,4");
		System.out.println(".comm   c,4");
		System.out.println(".comm   z,4");
		System.out.println("main:");
		System.out.println("pushl   %ebp");
		System.out.println("movl    %esp, %ebp");
		
		int FinalResult = 0;

		while(true)
		{	input = in.nextLine();
			if(input.equals(" "))
				break;

			StringTokenizer st = new StringTokenizer(input," ");
			while(st.hasMoreTokens())
			{	System.out.println();
				String operator = st.nextToken();
				String arg1     = st.nextToken();
				String arg2     = st.nextToken();
				String result   = st.nextToken();
				if(operator.equals("="))
				{	System.out.print("movl ");	}
				else if(operator.equals("+"))
				{	System.out.print("addl ");	}
				
				if(Character.isDigit(arg1.charAt(0)))
				{	System.out.print("$"+arg1);	
					FinalResult += Integer.parseInt(arg1);
				}
				else if(arg1.equals("eax"))
				{	System.out.print("%"+arg1);	}
				else
				{	System.out.print(arg1);		}

				if(result.equals("eax"))
				{       System.out.print(", %"+result);     }
				else
				{       System.out.print(" ,"+result);        }

			}
		}
		System.out.println("\npushl   z");
		System.out.println("pushl   $msg");
		System.out.println("call    printf");
		System.out.println("leave");
		System.out.println("ret");

		//System.out.println("Final Result of LHS variable :"+FinalResult);

	}
}

$ gcc  quad.s   
$a.out
Final result of LHS var = 90
$

/*************************************************
myQuad.l
*************************************************/
import java.util.*;
import java.io.*;

public class myQuad
{  
	public static void main(String[] args)
	{
			System.out.println(".global main \nmsg: \n\t.string Final result of LHS var = %d\\n\"\n\t.comm   a,4\n\t.comm   b,4\n\t.comm   c,4\n\t.comm   z,4\nmain:\n\tpushl     %ebp\n\tmovl    %esp, %ebp\n");

			Scanner inp = new Scanner(System.in);
			String input = inp.nextLine();
    
			ArrayList<String> array = new ArrayList<String>();
			
			while (!input.equals("yo"))
			{
				String[] ele = input.split(" ");
				for (int i=0; i< ele.length; i++)
				{
					array.add(ele[i]);
					//System.out.println(array.get(i));
					System.out.println(array.size());
					
				}
				input = inp.nextLine();
			}
			int sum = 0;
			for (int i=0;i<array.size(); i+=4)
			{
				if (array.get(i).equals("="))
				{
					System.out.println("movl %"+array.get(i+1)+", "+array.get(i+3));
					System.out.println("value : "+array.get(i+1));
					if (Character.isDigit(array.get(i+1).charAt(0))) //<----- checking if the first character in 10 or 20 or 30 is a digit or not. If it is then add to sum.
																	//Can only check a character
					{	System.out.println("is digit : "+array.get(i+1));	
						sum += Integer.parseInt(array.get(i+1));	//<------------ add the values
					}
				}
				if (array.get(i).equals("+"))
				{
					System.out.println("addl "+array.get(i+1)+", %"+array.get(i+3));
				}
			}
			System.out.println("Sum : "+sum);
	}
}
